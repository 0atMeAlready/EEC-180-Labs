
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module lab2_part1(

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule


module fullAdder(

	input A, 
	input B, 
	input Cin,
	output S, 
	output Cout

);

	assign S = A ^ B ^ Cin;
	assign Cout = (A & B) | (A & Cin) | (B & Cin);

endmodule

module rippleAdder

	#(parameter N = 8)

(
	
	input [N-1:0] A, B, 
	input [N-1:0] Cin,
	output [N-1:0] S,
	output [N-1:0] Cout

);

	genvar i;

	fullAdder fa0 (A[0], B[0], Cin[0], S[0], Cout[0]);

		generate

			for(i = 1; i < N; i = i + 1) begin : rippleAdder_generation

				fullAdder fA (.A(A[i]), .B(B[i]), .Cin(Cin[i - 1]), .S(S[i]), .Cout(Cout[i]));

			end
	
		endgenerate

endmodule




