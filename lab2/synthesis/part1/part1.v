
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module lab2_part1(
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule

module fullAdder(
	
	input A,
	input B,
	input Cin,
	output S,
	output Cout
);

	assign S = A ^ B ^ Cin;
	assign Cout = (A & B) | (A & Cin) | (B & Cin);
	
endmodule

module rippleAdder(

		input [7:0] A, B,
		input Cin,
		output [7:0] S,
		output Cout

		);
		
		wire [7:0] c;
		
		fullAdder FA0 (
        .A(A[0]), .B(B[0]), .Cin(Cin), .S(S[0]), .Cout(c0)
		);

		 fullAdder FA1 (
        .A(A[1]), .B(B[1]), .Cin(c0), .S(S[1]), .Cout(c1)
		);

		fullAdder FA2 (
        .A(A[2]), .B(B[2]), .Cin(c1), .S(S[2]), .Cout(c2)
		);

		 fullAdder FA3 (
        .A(A[3]), .B(B[3]), .Cin(c2), .S(S[3]), .Cout(c3)
		);
		
		fullAdder FA4 (
        .A(A[4]), .B(B[4]), .Cin(c3), .S(S[4]), .Cout(c4)
		);
		
		
		fullAdder FA5 (
        .A(A[5]), .B(B[5]), .Cin(c4), .S(S[5]), .Cout(c5)
		);
		
		fullAdder FA6 (
        .A(A[6]), .B(B[6]), .Cin(c5), .S(S[6]), .Cout(c6)
		);
		
		fullAdder FA7 (
        .A(A[7]), .B(B[7]), .Cin(c6), .S(S[7]), .Cout(Cout)
		);
		
endmodule
