module full_adder (
    
	input A, B, Cin,    // Inputs: two bits to add and carry-in
    output Sum, Cout    // Outputs: sum and carry-out
	
);
    
	assign Sum = A ^ B ^ Cin;  // Sum is XOR of inputs
    assign Cout = (A & B) | (B & Cin) | (A & Cin); // Carry-out logic
	
endmodule

module multiplier (

    input [3:0] A, B,       // 4-bit inputs
    output [7:0] P          // 8-bit product
	
);

    wire [15:0] pp;         // Partial products
    wire [11:0] carry;      // Carry bits for the adders
    wire [11:0] sum;        // Sum bits for the adders

    // Generate partial products
    assign pp[0]  = A[0] & B[0];
    assign pp[1]  = A[1] & B[0];
    assign pp[2]  = A[2] & B[0];
    assign pp[3]  = A[3] & B[0];
    assign pp[4]  = A[0] & B[1];
    assign pp[5]  = A[1] & B[1];
    assign pp[6]  = A[2] & B[1];
    assign pp[7]  = A[3] & B[1];
    assign pp[8]  = A[0] & B[2];
    assign pp[9]  = A[1] & B[2];
    assign pp[10] = A[2] & B[2];
    assign pp[11] = A[3] & B[2];
    assign pp[12] = A[0] & B[3];
    assign pp[13] = A[1] & B[3];
    assign pp[14] = A[2] & B[3];
    assign pp[15] = A[3] & B[3];

    // Layer 1: First row of full adders
    full_adder fa1 (pp[4], pp[1], 1'b0, sum[0], carry[0]);
    full_adder fa2 (pp[5], pp[2], carry[0], sum[1], carry[1]);
    full_adder fa3 (pp[6], pp[3], carry[1], sum[2], carry[2]);
    full_adder fa4 (pp[7], 1'b0, carry[2], sum[3], carry[3]);

    // Layer 2: Second row of full adders
    full_adder fa5  (pp[8], sum[0], 1'b0, sum[4], carry[4]);
    full_adder fa6  (pp[9], sum[1], carry[4], sum[5], carry[5]);
    full_adder fa7  (pp[10], sum[2], carry[5], sum[6], carry[6]);
    full_adder fa8  (pp[11], sum[3], carry[6], sum[7], carry[7]);

    // Layer 3: Third row of full adders
    full_adder fa9  (pp[12], sum[4], 1'b0, sum[8], carry[8]);
    full_adder fa10 (pp[13], sum[5], carry[8], sum[9], carry[9]);
    full_adder fa11 (pp[14], sum[6], carry[9], sum[10], carry[10]);
    full_adder fa12 (pp[15], sum[7], carry[10], sum[11], carry[11]);

    // Final product
    assign P[0] = pp[0];
    assign P[1] = sum[0];
    assign P[2] = sum[4];
    assign P[3] = sum[8];
    assign P[4] = sum[9];
    assign P[5] = sum[10];
    assign P[6] = sum[11];
    assign P[7] = carry[11];

endmodule


module testbench;
    reg [3:0] A, B;       // Inputs to the multiplier
    wire [7:0] P;         // Output from the multiplier

    // Instantiate the design under test (DUT)
    multiplier MA (
        .A(A),
        .B(B),
        .P(P)
    );

    integer i, j; // Loop variables

    initial begin
        // Monitor for debugging
        $monitor("sA=%b B=%b P=%b", A, B, P);

        // Iterate through all possible combinations of A and B
        for (i = 0; i < 16; i = i + 1) begin
                
		A [3:0] = i; // Assign values to A
                B [3:0] = i; // Assign values to B

                #10; // Wait 10 time units for results to stabilize

                // Check result
                if (P !== (A * B)) begin
                    $display("ERROR: A=%b B=%b P=%b (Expected %b)", 
                              A, B, P, A * B);
                
            end
        end

        $finish; // End simulation
    end
endmodule


