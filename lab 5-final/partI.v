`include "C:/Users/dzyzhang/EEC180/lab 5/synthesis/supplement files/HEX_DISPLAY.v"
//`include "C:/Users/dzyzhang/EEC180/lab 5/ip/ram_1prt.v"

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module partI(

	//////////// CLK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire Enable, RAM_SELECT, CLK;
wire [3:0] Addr, MDI,RAM1_OUT, RAM0_OUT;

//=======================================================
//  Structural coding
//=======================================================
assign Enable = SW[9];
assign RAM_SELECT = SW[8];
assign CLK = KEY[0];
assign Addr = SW[7:4]; //address
assign MDI = SW[3:0]; //input

// Generate write enable signals for RAM0 and RAM1
wire RAM0_WE = Enable & ~RAM_SELECT;  // Write to RAM0 when RAM_SELECT = 0
wire RAM1_WE = Enable &  RAM_SELECT;  // Write to RAM1 when RAM_SELECT = 1

// Instantiate RAM0
/*RAM RAM0 (
    .Addr(Addr),
    .MDI(MDI),
    .Write_Enable(RAM0_WE),
    .CLK(CLK),
    .MDO(RAM0_OUT)
);

// Instantiate RAM1
RAM RAM1 (
    .Addr(Addr),
    .MDI(MDI),
    .Write_Enable(RAM1_WE),
    .CLK(CLK),
    .MDO(RAM1_OUT)
);*/

ram_1prt RAM0 (
    .address(Addr),
    .clock(CLK),
    .data(MDI),
    .wren(RAM0_WE),
    .q(RAM0_OUT)
);

// Instantiate RAM1
ram_1prt RAM1 (
    .address(Addr),
    .clock(CLK),
    .data(MDI),
    .wren(RAM1_WE),
    .q(RAM1_OUT)
);

// Display Addr on HEX3
HEX_DISPLAY hex3_inst (Addr[3:0],HEX3);
// Display MDI on HEX2
HEX_DISPLAY hex2_inst (MDI[3:0],HEX2);
// Display RAM1 output on HEX1
HEX_DISPLAY hex1_inst (RAM1_OUT,HEX1);
// Display RAM0 output on HEX0
HEX_DISPLAY hex0_inst (RAM0_OUT,HEX0);

assign HEX4 = 7'b1111111;
assign HEX5 = 7'b1111111;

endmodule
